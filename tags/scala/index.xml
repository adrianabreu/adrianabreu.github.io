<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scala on Adrián Abreu</title><link>https://adrianabreu.github.io/tags/scala/</link><description>Recent content in Scala on Adrián Abreu</description><generator>Hugo</generator><language>es-ES</language><copyright>2017-2024 Adrián Abreu powered by Hugo and Kiss Theme</copyright><lastBuildDate>Fri, 22 Mar 2024 18:06:32 +0000</lastBuildDate><atom:link href="https://adrianabreu.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>Developing on windows</title><link>https://adrianabreu.github.io/blog/2024-03-22-developing-on-windows/</link><pubDate>Fri, 22 Mar 2024 18:06:32 +0000</pubDate><guid>https://adrianabreu.github.io/blog/2024-03-22-developing-on-windows/</guid><description>Over the years, I&amp;rsquo;ve been using MacOS at work and Ubuntu at home for my development tasks. However, my Lenovo P1 Gen 3 laptop didn&amp;rsquo;t work well with Linux, leading to frequent issues with the camera and graphics (screen flickering, I&amp;rsquo;m looking at you, and it hurts).
I&amp;rsquo;ve triend Windows Subsystem for Linux (WSL) but it was quite bad to be honest. But as I&amp;rsquo;ve heard of WSL2 and WSLg, I decided to give it another shot.</description></item><item><title>Implementing Confluent Wire Format In Scala</title><link>https://adrianabreu.github.io/blog/2024-11-04-wire-format-scala/</link><pubDate>Wed, 04 Oct 2023 17:49:32 +0000</pubDate><guid>https://adrianabreu.github.io/blog/2024-11-04-wire-format-scala/</guid><description>I&amp;rsquo;ve been working with Confluent for the last few months. I&amp;rsquo;ve been mainly configuring the Terraform project and querying the API for some kSQL setup and tuning. When we had ready our sandbox environment, I wanted to test the throughput.
If you follow the docs is straightforward, you need to use the serializer from the Confluent library. In fact if you use Spark you can use some nice wrapper as ABRiS.</description></item><item><title>Sbt tests</title><link>https://adrianabreu.github.io/blog/2022-02-07-sbt-tests/</link><pubDate>Mon, 07 Feb 2022 19:53:32 +0000</pubDate><guid>https://adrianabreu.github.io/blog/2022-02-07-sbt-tests/</guid><description>Últimamente en el trabajo estoy usando mucho delta para algunas tablas de dimensiones y estas tablas realizan actualizaciones parciales de las filas para replicar la lógica de negocio.
Esto, nos lleva a varios tests que replican un estado de la tabla y realizan las actualizaciones pertinentes para comprobar todos los flujos y por ende un sobrecoste de ejecución de ese tipo de tests que acaba siendo agotador.
Una de las soluciones planteadas fue incluir en las builds un parámetro para saltarse el step de ejecución de los tests.</description></item><item><title>Sbt Intro I</title><link>https://adrianabreu.github.io/blog/2021-10-10-sbt-intro-i/</link><pubDate>Sun, 10 Oct 2021 14:47:32 +0000</pubDate><guid>https://adrianabreu.github.io/blog/2021-10-10-sbt-intro-i/</guid><description>El mes pasado cambié a otro trabajo :) y por casualidades he vuelto a acabar con proyectos de scala. Este proyecto está bastante avanzado y hace un uso intensivo de los plugins de sbt. De hecho, una tarea que tengo próximamente es hacer una plantilla para proyectos. Así que quería repasar los conceptos básicos de sbt en una serie de posts.
¿Qué es sbt scala build tool? Es una herramienta para gestionar proyectos en scala.</description></item><item><title>Scala best practices notes</title><link>https://adrianabreu.github.io/blog/2020-04-27-scala-best-practices-nicolas-rinaudo/</link><pubDate>Mon, 27 Apr 2020 20:55:32 +0000</pubDate><guid>https://adrianabreu.github.io/blog/2020-04-27-scala-best-practices-nicolas-rinaudo/</guid><description>He aprovechado estos días de cuarentena para revisar algunos de los &amp;ldquo;huecos&amp;rdquo; de conocimiento que tenía en Scala. Una de las charlas que he podido ver es esta: Scala best practices I wish someone&amp;rsquo;d told me about - Nicolas Rinaudo
Por supuesto siempre recomiendo ver la charla, pero he querido condensar (aún más) ese conocimiento en este post, insisto, es amena y muy interesante, muchos de los puntos que se definen en la charla no se han explicado porque la mayoría se resuelven en dotty y aunque</description></item><item><title>Notas sobre programación funcional en Scala I</title><link>https://adrianabreu.github.io/blog/2020-04-07-notes-on-functional-programming-in-scala-i/</link><pubDate>Mon, 06 Apr 2020 18:22:32 +0000</pubDate><guid>https://adrianabreu.github.io/blog/2020-04-07-notes-on-functional-programming-in-scala-i/</guid><description>Hace unos días pude comprarme el libro de Paul Chiusano y Rúnar Bjarnason: Functional Programming in scala y no puedo estar más contento con él.
Como ya es costumbre, aprovecho para dejar mis notas sobre el libro en el blog. No se trata de un resumen del mismo sino curiosidades que sé que volveré a consultar en un futuro. Intentaré que no queden post excesivamente largos haciendo un por capítulo. Igualmente, recomiendo a todo el mundo adquirir &amp;ldquo;el libro rojo de Scala&amp;rdquo; y echarle un vistazo.</description></item></channel></rss>