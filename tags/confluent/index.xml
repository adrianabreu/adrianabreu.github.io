<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Confluent on Adrián Abreu</title><link>https://adrianabreu.com/tags/confluent/</link><description>Recent content in Confluent on Adrián Abreu</description><generator>Hugo</generator><language>es-ES</language><copyright>2017-2024 Adrián Abreu powered by Hugo and Kiss Theme</copyright><lastBuildDate>Sat, 21 Oct 2023 22:52:32 +0000</lastBuildDate><atom:link href="https://adrianabreu.com/tags/confluent/index.xml" rel="self" type="application/rss+xml"/><item><title>KSQL, a horror tale</title><link>https://adrianabreu.com/blog/2023-10-22-ksql-a-horror-tale/</link><pubDate>Sat, 21 Oct 2023 22:52:32 +0000</pubDate><guid>https://adrianabreu.com/blog/2023-10-22-ksql-a-horror-tale/</guid><description>After spending several weeks working on a ksql solution to filter billions of events and determine their destination topic, I was disappointed to find that it did not live up to my expectations.
I had hoped for a more robust product that would align with our needs. Previously, we utilized a similar filter in Spark, incurring traffic costs for both Confluent and AWS. With kSQL, the advantage was that we could avoid paying for AWS traffic.</description></item><item><title>Implementing Confluent Wire Format In Scala</title><link>https://adrianabreu.com/blog/2024-11-04-wire-format-scala/</link><pubDate>Wed, 04 Oct 2023 17:49:32 +0000</pubDate><guid>https://adrianabreu.com/blog/2024-11-04-wire-format-scala/</guid><description>I&amp;rsquo;ve been working with Confluent for the last few months. I&amp;rsquo;ve been mainly configuring the Terraform project and querying the API for some kSQL setup and tuning. When we had ready our sandbox environment, I wanted to test the throughput.
If you follow the docs is straightforward, you need to use the serializer from the Confluent library. In fact if you use Spark you can use some nice wrapper as ABRiS.</description></item></channel></rss>