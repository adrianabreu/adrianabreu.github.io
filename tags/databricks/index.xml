<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Databricks on Adrián Abreu</title><link>https://adrianabreu.gitlab.io/tags/databricks/</link><description>Recent content in Databricks on Adrián Abreu</description><generator>Hugo -- gohugo.io</generator><language>es-ES</language><copyright>2017-2022 Adrián Abreu powered by Hugo and Kiss Theme</copyright><lastBuildDate>Fri, 26 Jan 2024 09:06:32 +0000</lastBuildDate><atom:link href="https://adrianabreu.gitlab.io/tags/databricks/index.xml" rel="self" type="application/rss+xml"/><item><title>Querying the databricks api</title><link>https://adrianabreu.gitlab.io/blog/2024-01-26-querying-the-databricks-api/</link><pubDate>Fri, 26 Jan 2024 09:06:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2024-01-26-querying-the-databricks-api/</guid><description>Exploring databricks SQL usage
At my company, we adopted databricks SQL for most of our users. Some users have developed applications that use the JDBC connector, some users have built their dashboards, and some users write plain ad-hoc queries.
We wanted to know what they queried, so we tried to use Unity Catalog&amp;rsquo;s insights, but it wasn&amp;rsquo;t enough for our case. We work with IOT and we are interested in what filters they apply within our tables.</description></item><item><title>Tweaking Spark Kafka</title><link>https://adrianabreu.gitlab.io/blog/2023-10-27-tweaking-spark-kafka/</link><pubDate>Fri, 27 Oct 2023 12:06:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2023-10-27-tweaking-spark-kafka/</guid><description>Well, I&amp;rsquo;m facing a huge interesting case. I&amp;rsquo;m working at Wallbox where we need to deal with billions of rows every day. Now we need to use Spark for some Kafka filtering and publish the results into different topics according to some rules.
I won&amp;rsquo;t dig deep into the logic except for performance-related stuff, let&amp;rsquo;s try to increase the processing speed.
When reading from Kafka you usually get 1 task per partition, so if you have 6 partitions and 48 cores you are not using 87.</description></item><item><title>Repairing metadata unity catalog</title><link>https://adrianabreu.gitlab.io/blog/2023-10-02-repairing-metadata-unity-catalog/</link><pubDate>Mon, 02 Oct 2023 13:25:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2023-10-02-repairing-metadata-unity-catalog/</guid><description>I&amp;rsquo;ve been subscribed to https://www.dataengineeringweekly.com/p/data-engineering-weekly-148 for years. This last number included several on-call posts on Medium. I found these quite useful.
Today, I got an alert from Metaplane that a cost monitor dashboard was out of date. I checked the processes, and everything was fine. I ran a query to check the freshness of the data and it was ok too.
Metaplane checks our delta table freshness by querying the table information available in the Unity Catalog.</description></item><item><title>Adding extra params on DatabricksRunNowOperator</title><link>https://adrianabreu.gitlab.io/blog/2023-07-28-extra_params_databricksrunnow/</link><pubDate>Fri, 28 Jul 2023 16:00:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2023-07-28-extra_params_databricksrunnow/</guid><description>With the new Databricks jobs API 2.1 you have different parameters depending on the kind of tasks you have in your workflow. Like: jar_params, sql_params, python_params, notebook_params&amp;hellip;
And not always the airflow operator is ready to handle all of the. If we check the current release of the DatabricksRunNowOperator, we can see that there is only support for: notebook_params python_params python_named_parameters jar_params spark_submit_params And not the query_params mentioned earlier. But there is a way of combining both, there is a param called jsob that allows you to write the payload of a databricksrunnow and it will also merge the content of the JSON with your named_params!</description></item><item><title>Enabling Unity Catalog</title><link>https://adrianabreu.gitlab.io/blog/2023-05-23-enabling-unity-catalog/</link><pubDate>Tue, 23 May 2023 07:48:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2023-05-23-enabling-unity-catalog/</guid><description>I&amp;rsquo;ve spent the last few weeks setting up the unity catalog for my company. It&amp;rsquo;s been an extremely tiring process. And there are several concepts to bring here. My main point is to have a clear view of the requirements.
Disclaimer: as of today with https://github.com/databricks/terraform-provider-databricks release 1.17.0, some steps should be done in an &amp;ldquo;awkward way&amp;rdquo; that is, the account API does not expose the catalog&amp;rsquo;s endpoint and should be done through a workspace.</description></item><item><title>Optimizing Spark</title><link>https://adrianabreu.gitlab.io/blog/2024-12-12-15-optimizing-spark-i/</link><pubDate>Mon, 15 Aug 2022 09:52:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2024-12-12-15-optimizing-spark-i/</guid><description>Últimamente me he centrado en mejorar mis habilidades con Spark y he aprovechado para hacer algunos trainings de databricks. (Que por cierto ha sacado Beacons, un programa de reconocimiento para sus colaboradores y ha mencionado algunos nombres muy grandes por ahí).
Y en estos cursos está optimizing spark, que simplifica y explica de una forma bastante sencilla los problemas de rendimientos que ocurren en el mundo de big data. A estos problemas se les denomina las 5s:</description></item><item><title>Optimizing Spark II</title><link>https://adrianabreu.gitlab.io/blog/2024-12-12-16-optimizing-spark-ii/</link><pubDate>Mon, 15 Aug 2022 09:52:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2024-12-12-16-optimizing-spark-ii/</guid><description>Continuando con la lista de optimizaciones en spark tneemos el spill.
Hacer spill no es más que persistir un rdd en disco, ya que, sus datos no caben en memoria.
Existen varias causas, la más sencilla de pensar es hacer un explode un array donde nuestras columnas crecen de forma exponencial.
Cuando el spill ocurre se puede identificar por dos valores que siempre van de la mano:
Spill (Memory) Spill (Disk) (Estas columnas solo aparecen en la spark ui si hay spill).</description></item><item><title>Testing Databricks Photon</title><link>https://adrianabreu.gitlab.io/blog/2022-08-12-testing-photon-engine/</link><pubDate>Fri, 12 Aug 2022 09:52:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2022-08-12-testing-photon-engine/</guid><description>I was a bit skeptical about photon since I realized that it cost about double the amount of DBU, required specifically optimized machines and did not support UDFs (it was my main target).
From the Databricks Official Docs:
Limitations Does not support Spark Structured Streaming. Does not support UDFs. Does not support RDD APIs. Not expected to improve short-running queries (&amp;lt;2 seconds), for example, queries against small amounts of data. Photon runtime</description></item><item><title>Databricks Cluster Management</title><link>https://adrianabreu.gitlab.io/blog/2022-07-30-databricks-cluster-management/</link><pubDate>Sat, 30 Jul 2022 13:52:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2022-07-30-databricks-cluster-management/</guid><description>For the last few months, I&amp;rsquo;ve been into ETL optimization. Most of the changes were as dramatic as moving tables from ORC to delta revamping the partition strategy to some as simple as upgrading the runtime version to 10.4 so the ETL starts using low-shuffle merge.
But at my job, we have a lot of jobs. Each ETL can be easily launched at *30 with different parameters so I wanted to dig into the most effective strategy for it.</description></item><item><title>Reading firebase data</title><link>https://adrianabreu.gitlab.io/blog/2022-07-01-reading-firebase-data/</link><pubDate>Fri, 01 Jul 2022 07:28:32 +0000</pubDate><guid>https://adrianabreu.gitlab.io/blog/2022-07-01-reading-firebase-data/</guid><description>Firebase is a common component nowadays for most mobile apps. And it can provide some useful insights, for example in my previous company we use it to detect where the people left at the initial app wizard. (We could measure it).
It is quite simple to export your data to BigQuery: https://firebase.google.com/docs/projects/bigquery-export
But maybe your lake is in AWS or Azure. In the next lines, I will try to explain how to load the data in your lake and some improvements we have applied.</description></item></channel></rss>