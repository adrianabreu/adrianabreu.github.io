<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Knowledges on Adrián Abreu</title><link>https://adrianabreu.github.io/knowledge/</link><description>Recent content in Knowledges on Adrián Abreu</description><generator>Hugo -- gohugo.io</generator><language>es-ES</language><copyright>2017 Adrián Abreu powered by Hugo and Kiss Theme</copyright><lastBuildDate>Sun, 08 Oct 2017 18:04:42 +0000</lastBuildDate><atom:link href="https://adrianabreu.github.io/knowledge/index.xml" rel="self" type="application/rss+xml"/><item><title>SOLID Principles</title><link>https://adrianabreu.github.io/knowledge/solidprinciples/</link><pubDate>Sun, 08 Oct 2017 18:04:42 +0000</pubDate><guid>https://adrianabreu.github.io/knowledge/solidprinciples/</guid><description>SRP: Single Responsability Principle Una pieza de software debería tener una única razón para cambiar.
Si una clase tiene más de una &amp;ldquo;responsabilidad&amp;rdquo; (razón de cambio), un cambio en algún requisito podría ser muy difícil de modelar. Ya que al cumplir con esta responsabilidad podríamos estar incumpliendo otras.
Esto hace que el diseño sea realmente frágil y esté acoplado: es decir, se va a romper de formas inesperadas.
Es importante ver que esta regla aunque es general no implica que tengamos que desgranar siempre todas las clases.</description></item></channel></rss>